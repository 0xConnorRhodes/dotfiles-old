# interpreter for shell commands (needs to be POSIX compatible)
set shell zsh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'
set previewer /home/connor/.config/lf/preview.sh

# image preview
map - $~/.config/lf/draw_img.sh $f

## video preview
cmd video_preview ${{
    CACHE=$(mktemp /tmp/thumb_cache.XXXXX)
    ffmpegthumbnailer -i "$f" -o $CACHE -s 0
    ~/.config/lf/draw_img.sh $CACHE && rm $CACHE
}}
map - :video_preview

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# upload the file to my opendrive public folder
map U $rclone copy -P $f opendrive:/public

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f
map E $emacsclient -c -n $f


# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
#cmd open ${{
#    case $(file --mime-type $f -b) in
#        text/*) $EDITOR $fx;;
#        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
#    esac
#}}

# in the future, make a case statement to open .org in emacs and the rest with the logic below
cmd open ${{
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        image/*) ~/.config/lf/draw_img.sh $f;;
        video/*) devour mimeopen $f;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
#cmd trash %set -f; mv $fx ~/.trash
# file move/copy commands
map y copy
map d cut

# define a custom 'delete' command
 cmd delete ${{
     set -f
     trash-put $(echo $fx)
 }}

# use '<delete>' key for either 'trash' or 'delete' command
map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# pazi autojump
cmd aj %lf -remote "send $id cd \"$(fasd -d $1)\"" #double quotes allow the internal command to run, but they must be escaped to not be printed by the outer double quotes (this command is a combination of the lf extensions using fzf and autojump
map a push :aj<space>

cmd fjump $lf -remote "send $id cd \"$(fasd_cd -d | awk '{ print $2 }' | fzf)\""
map J push :aj<enter>

cmd dragon $dragon-drag-and-drop $f
map D push :dragon<enter>

cmd pcmanopen $devour pcmanfm $f
map P push :pcmanopen<enter>

cmd refile $~/dwn/testfolder/refile.sh $f
map R push :refile<enter>

#map f $devour mimeopen $(ls | fzf)


# fuzzy directory jump
#cmd fzjump $cd $(fasd_d -d | awk '{ print $2 }' | fzf)
cmd fzjump $lf -remote "send $id cd \"$(fasd -d | awk '{print $2 }' | fzf)\""
map J push :fzjump<enter>

map . set hidden!

# sort commands
map st :set sortby time; set reverse; set info time

# movement
## for subfolders use dot.
## eg. gv. ~/videso gva ~/videos/anime

map gv cd ~/videos
map gsh cd ~/pix/shots
map gd cd ~/dwn
map gx cd ~/dox

map gc cd ~/.config
map gl cd ~/.local
#map gE cd /etc
#map gU. cd /usr
#map gUs cd /usr/share
map gtr cd ~/.local/share/Trash/files
